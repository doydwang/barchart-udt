====
    =================================================================================

    BSD LICENCE (http://en.wikipedia.org/wiki/BSD_licenses)

    ARTIFACT='barchart-udt4'.VERSION='1.0.0-SNAPSHOT'.TIMESTAMP='2009-09-09_16-24-35'

    Copyright (C) 2009, Barchart, Inc. (http://www.barchart.com/)

    All rights reserved.

    Redistribution and use in source and binary forms, with or without modification,
    are permitted provided that the following conditions are met:

        * Redistributions of source code must retain the above copyright notice,
        this list of conditions and the following disclaimer.

        * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.

        * Neither the name of the Barchart, Inc. nor the names of its contributors
        may be used to endorse or promote products derived from this software
        without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
    OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    Developers: Andrei Pozolotin;

    =================================================================================
====
Compiled from "Set.java"
public interface java.util.Set extends java.util.Collection{
public abstract int size();
  Signature: ()I
public abstract boolean isEmpty();
  Signature: ()Z
public abstract boolean contains(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract java.util.Iterator iterator();
  Signature: ()Ljava/util/Iterator;
public abstract java.lang.Object[] toArray();
  Signature: ()[Ljava/lang/Object;
public abstract java.lang.Object[] toArray(java.lang.Object[]);
  Signature: ([Ljava/lang/Object;)[Ljava/lang/Object;
public abstract boolean add(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract boolean remove(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract boolean containsAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract boolean addAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract boolean retainAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract boolean removeAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract void clear();
  Signature: ()V
public abstract boolean equals(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract int hashCode();
  Signature: ()I
}

Compiled from "Iterator.java"
public interface java.util.Iterator{
public abstract boolean hasNext();
  Signature: ()Z
public abstract java.lang.Object next();
  Signature: ()Ljava/lang/Object;
public abstract void remove();
  Signature: ()V
}

Compiled from "List.java"
public interface java.util.List extends java.util.Collection{
public abstract int size();
  Signature: ()I
public abstract boolean isEmpty();
  Signature: ()Z
public abstract boolean contains(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract java.util.Iterator iterator();
  Signature: ()Ljava/util/Iterator;
public abstract java.lang.Object[] toArray();
  Signature: ()[Ljava/lang/Object;
public abstract java.lang.Object[] toArray(java.lang.Object[]);
  Signature: ([Ljava/lang/Object;)[Ljava/lang/Object;
public abstract boolean add(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract boolean remove(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract boolean containsAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract boolean addAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract boolean addAll(int, java.util.Collection);
  Signature: (ILjava/util/Collection;)Z
public abstract boolean removeAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract boolean retainAll(java.util.Collection);
  Signature: (Ljava/util/Collection;)Z
public abstract void clear();
  Signature: ()V
public abstract boolean equals(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
public abstract int hashCode();
  Signature: ()I
public abstract java.lang.Object get(int);
  Signature: (I)Ljava/lang/Object;
public abstract java.lang.Object set(int, java.lang.Object);
  Signature: (ILjava/lang/Object;)Ljava/lang/Object;
public abstract void add(int, java.lang.Object);
  Signature: (ILjava/lang/Object;)V
public abstract java.lang.Object remove(int);
  Signature: (I)Ljava/lang/Object;
public abstract int indexOf(java.lang.Object);
  Signature: (Ljava/lang/Object;)I
public abstract int lastIndexOf(java.lang.Object);
  Signature: (Ljava/lang/Object;)I
public abstract java.util.ListIterator listIterator();
  Signature: ()Ljava/util/ListIterator;
public abstract java.util.ListIterator listIterator(int);
  Signature: (I)Ljava/util/ListIterator;
public abstract java.util.List subList(int, int);
  Signature: (II)Ljava/util/List;
}

